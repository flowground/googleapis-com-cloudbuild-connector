{
    "type": "object",
    "properties": {
        "projectId": {
            "required": true,
            "type": "string"
        },
        "triggerId": {
            "required": true,
            "type": "string"
        },
        "alt": {
            "type": "string",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "default": "json"
        },
        "callback": {
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "Configuration for an automated build in response to source repository\nchanges.",
            "properties": {
                "build": {
                    "description": "Contents of the build template.",
                    "properties": {
                        "artifacts": {
                            "description": "Artifacts produced by the build that should be uploaded upon\nsuccessful completion of all build steps.",
                            "properties": {
                                "images": {
                                    "description": "A list of images to be pushed upon the successful completion of all build\nsteps.\n\nThe images will be pushed using the builder service account's credentials.\n\nThe digests of the pushed images will be stored in the Build resource's\nresults field.\n\nIf any of the images fail to be pushed, the build is marked FAILURE.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "objects": {
                                    "description": "A list of objects to be uploaded to Cloud Storage upon successful\ncompletion of all build steps.\n\nFiles in the workspace matching specified paths globs will be uploaded to\nthe specified Cloud Storage location using the builder service account's\ncredentials.\n\nThe location and generation of the uploaded objects will be stored in the\nBuild resource's results field.\n\nIf any objects fail to be pushed, the build is marked FAILURE.",
                                    "properties": {
                                        "location": {
                                            "description": "Cloud Storage bucket and optional object path, in the form\n\"gs://bucket/path/to/somewhere/\". (see [Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\n\nFiles in the workspace matching any path pattern will be uploaded to\nCloud Storage with this location as a prefix.",
                                            "type": "string"
                                        },
                                        "paths": {
                                            "description": "Path globs used to match files in the build's workspace.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "timing": {
                                            "description": "Output only. Stores timing information for pushing all artifact objects.",
                                            "properties": {
                                                "endTime": {
                                                    "description": "End of time span.",
                                                    "format": "google-datetime",
                                                    "type": "string"
                                                },
                                                "startTime": {
                                                    "description": "Start of time span.",
                                                    "format": "google-datetime",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "buildTriggerId": {
                            "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it\nwas triggered automatically.",
                            "type": "string"
                        },
                        "createTime": {
                            "description": "Output only. Time at which the request to create the build was received.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "finishTime": {
                            "description": "Output only. Time at which execution of the build was finished.\n\nThe difference between finish_time and start_time is the duration of the\nbuild's execution.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "id": {
                            "description": "Output only. Unique identifier of the build.",
                            "type": "string"
                        },
                        "images": {
                            "description": "A list of images to be pushed upon the successful completion of all build\nsteps.\n\nThe images are pushed using the builder service account's credentials.\n\nThe digests of the pushed images will be stored in the `Build` resource's\nresults field.\n\nIf any of the images fail to be pushed, the build status is marked\n`FAILURE`.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "logUrl": {
                            "description": "Output only. URL to logs for this build in Google Cloud Console.",
                            "type": "string"
                        },
                        "logsBucket": {
                            "description": "Google Cloud Storage bucket where logs should be written (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).\nLogs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
                            "type": "string"
                        },
                        "options": {
                            "description": "Special options for this build.",
                            "properties": {
                                "diskSizeGb": {
                                    "description": "Requested disk size for the VM that runs the build. Note that this is *NOT*\n\"disk free\"; some of the space will be used by the operating system and\nbuild utilities. Also note that this is the minimum disk size that will be\nallocated for the build -- the build may run with a larger disk than\nrequested. At present, the maximum disk size is 1000GB; builds that request\nmore than the maximum are rejected with an error.",
                                    "format": "int64",
                                    "type": "string"
                                },
                                "env": {
                                    "description": "A list of global environment variable definitions that will exist for all\nbuild steps in this build. If a variable is defined in both globally and in\na build step, the variable will use the build step value.\n\nThe elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\nbeing given the value \"VALUE\".",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "logStreamingOption": {
                                    "description": "Option to define build log streaming behavior to Google Cloud\nStorage.",
                                    "enum": [
                                        "STREAM_DEFAULT",
                                        "STREAM_ON",
                                        "STREAM_OFF"
                                    ],
                                    "type": "string"
                                },
                                "logging": {
                                    "description": "Option to specify the logging mode, which determines where the logs are\nstored.",
                                    "enum": [
                                        "LOGGING_UNSPECIFIED",
                                        "LEGACY",
                                        "GCS_ONLY"
                                    ],
                                    "type": "string"
                                },
                                "machineType": {
                                    "description": "Compute Engine machine type on which to run the build.",
                                    "enum": [
                                        "UNSPECIFIED",
                                        "N1_HIGHCPU_8",
                                        "N1_HIGHCPU_32"
                                    ],
                                    "type": "string"
                                },
                                "requestedVerifyOption": {
                                    "description": "Requested verifiability options.",
                                    "enum": [
                                        "NOT_VERIFIED",
                                        "VERIFIED"
                                    ],
                                    "type": "string"
                                },
                                "secretEnv": {
                                    "description": "A list of global environment variables, which are encrypted using a Cloud\nKey Management Service crypto key. These values must be specified in the\nbuild's `Secret`. These variables will be available to all build steps\nin this build.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "sourceProvenanceHash": {
                                    "description": "Requested hash for SourceProvenance.",
                                    "items": {
                                        "enum": [
                                            "NONE",
                                            "SHA256",
                                            "MD5"
                                        ],
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "substitutionOption": {
                                    "description": "Option to specify behavior when there is an error in the substitution\nchecks.",
                                    "enum": [
                                        "MUST_MATCH",
                                        "ALLOW_LOOSE"
                                    ],
                                    "type": "string"
                                },
                                "volumes": {
                                    "description": "Global list of volumes to mount for ALL build steps\n\nEach volume is created as an empty volume prior to starting the build\nprocess. Upon completion of the build, volumes and their contents are\ndiscarded. Global volume names and paths cannot conflict with the volumes\ndefined a build step.\n\nUsing a global volume in a build with only one step is not valid as\nit is indicative of a build request with an incorrect configuration.",
                                    "items": {
                                        "description": "Volume describes a Docker container volume which is mounted into build steps\nin order to persist files across build step execution.",
                                        "properties": {
                                            "name": {
                                                "description": "Name of the volume to mount.\n\nVolume names must be unique per build step and must be valid names for\nDocker volumes. Each named volume must be used by at least two build steps.",
                                                "type": "string"
                                            },
                                            "path": {
                                                "description": "Path at which to mount the volume.\n\nPaths must be absolute and cannot conflict with other volume paths on the\nsame build step or with certain reserved volume paths.",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "workerPool": {
                                    "description": "Option to specify a `WorkerPool` for the build. User specifies the pool\nwith the format \"[WORKERPOOL_PROJECT_ID]/[WORKERPOOL_NAME]\".\nThis is an experimental field.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "projectId": {
                            "description": "Output only. ID of the project.",
                            "type": "string"
                        },
                        "results": {
                            "description": "Output only. Results of the build.",
                            "properties": {
                                "artifactManifest": {
                                    "description": "Path to the artifact manifest. Only populated when artifacts are uploaded.",
                                    "type": "string"
                                },
                                "artifactTiming": {
                                    "description": "Time to push all non-container artifacts.",
                                    "properties": {
                                        "endTime": {
                                            "description": "End of time span.",
                                            "format": "google-datetime",
                                            "type": "string"
                                        },
                                        "startTime": {
                                            "description": "Start of time span.",
                                            "format": "google-datetime",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "buildStepImages": {
                                    "description": "List of build step digests, in the order corresponding to build step\nindices.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "buildStepOutputs": {
                                    "description": "List of build step outputs, produced by builder images, in the order\ncorresponding to build step indices.\n\n[Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)\ncan produce this output by writing to `$BUILDER_OUTPUT/output`.\nOnly the first 4KB of data is stored.",
                                    "items": {
                                        "format": "byte",
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "images": {
                                    "description": "Container images that were built as a part of the build.",
                                    "items": {
                                        "description": "An image built by the pipeline.",
                                        "properties": {
                                            "digest": {
                                                "description": "Docker Registry 2.0 digest.",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Name used to push the container image to Google Container Registry, as\npresented to `docker push`.",
                                                "type": "string"
                                            },
                                            "pushTiming": {
                                                "description": "Output only. Stores timing information for pushing the specified image.",
                                                "properties": {
                                                    "endTime": {
                                                        "description": "End of time span.",
                                                        "format": "google-datetime",
                                                        "type": "string"
                                                    },
                                                    "startTime": {
                                                        "description": "Start of time span.",
                                                        "format": "google-datetime",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "numArtifacts": {
                                    "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded.",
                                    "format": "int64",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "secrets": {
                            "description": "Secrets to decrypt using Cloud Key Management Service.",
                            "items": {
                                "description": "Pairs a set of secret environment variables containing encrypted\nvalues with the Cloud KMS key to use to decrypt the value.",
                                "properties": {
                                    "kmsKeyName": {
                                        "description": "Cloud KMS key name to use to decrypt these envs.",
                                        "type": "string"
                                    },
                                    "secretEnv": {
                                        "additionalProperties": {
                                            "format": "byte",
                                            "type": "string"
                                        },
                                        "description": "Map of environment variable name to its encrypted value.\n\nSecret environment variables must be unique across all of a build's\nsecrets, and must be used by at least one build step. Values can be at most\n64 KB in size. There can be at most 100 secret values across all of a\nbuild's secrets.",
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "source": {
                            "description": "The location of the source files to build.",
                            "properties": {
                                "repoSource": {
                                    "description": "If provided, get the source from this location in a Cloud Source\nRepository.",
                                    "properties": {
                                        "branchName": {
                                            "description": "Name of the branch to build.",
                                            "type": "string"
                                        },
                                        "commitSha": {
                                            "description": "Explicit commit SHA to build.",
                                            "type": "string"
                                        },
                                        "dir": {
                                            "description": "Directory, relative to the source root, in which to run the build.\n\nThis must be a relative path. If a step's `dir` is specified and is an\nabsolute path, this value is ignored for that step's execution.",
                                            "type": "string"
                                        },
                                        "projectId": {
                                            "description": "ID of the project that owns the Cloud Source Repository. If omitted, the\nproject ID requesting the build is assumed.",
                                            "type": "string"
                                        },
                                        "repoName": {
                                            "description": "Name of the Cloud Source Repository. If omitted, the name \"default\" is\nassumed.",
                                            "type": "string"
                                        },
                                        "tagName": {
                                            "description": "Name of the tag to build.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "storageSource": {
                                    "description": "If provided, get the source from this location in Google Cloud Storage.",
                                    "properties": {
                                        "bucket": {
                                            "description": "Google Cloud Storage bucket containing the source (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
                                            "type": "string"
                                        },
                                        "generation": {
                                            "description": "Google Cloud Storage generation for the object. If the generation is\nomitted, the latest generation will be used.",
                                            "format": "int64",
                                            "type": "string"
                                        },
                                        "object": {
                                            "description": "Google Cloud Storage object containing the source.\n\nThis object must be a gzipped archive file (`.tar.gz`) containing source to\nbuild.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "sourceProvenance": {
                            "description": "Output only. A permanent fixed identifier for source.",
                            "properties": {
                                "fileHashes": {
                                    "additionalProperties": {
                                        "description": "Container message for hashes of byte content of files, used in\nSourceProvenance messages to verify integrity of source input to the build.",
                                        "properties": {
                                            "fileHash": {
                                                "description": "Collection of file hashes.",
                                                "items": {
                                                    "description": "Container message for hash values.",
                                                    "properties": {
                                                        "type": {
                                                            "description": "The type of hash that was performed.",
                                                            "enum": [
                                                                "NONE",
                                                                "SHA256",
                                                                "MD5"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "description": "The hash value.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "description": "Output only. Hash(es) of the build source, which can be used to verify that\nthe original source integrity was maintained in the build. Note that\n`FileHashes` will only be populated if `BuildOptions` has requested a\n`SourceProvenanceHash`.\n\nThe keys to this map are file paths used as build source and the values\ncontain the hash values for those files.\n\nIf the build source came in a single package such as a gzipped tarfile\n(`.tar.gz`), the `FileHash` will be for the single path to that file.",
                                    "type": "object"
                                },
                                "resolvedRepoSource": {
                                    "description": "A copy of the build's `source.repo_source`, if exists, with any\nrevisions resolved.",
                                    "properties": {
                                        "branchName": {
                                            "description": "Name of the branch to build.",
                                            "type": "string"
                                        },
                                        "commitSha": {
                                            "description": "Explicit commit SHA to build.",
                                            "type": "string"
                                        },
                                        "dir": {
                                            "description": "Directory, relative to the source root, in which to run the build.\n\nThis must be a relative path. If a step's `dir` is specified and is an\nabsolute path, this value is ignored for that step's execution.",
                                            "type": "string"
                                        },
                                        "projectId": {
                                            "description": "ID of the project that owns the Cloud Source Repository. If omitted, the\nproject ID requesting the build is assumed.",
                                            "type": "string"
                                        },
                                        "repoName": {
                                            "description": "Name of the Cloud Source Repository. If omitted, the name \"default\" is\nassumed.",
                                            "type": "string"
                                        },
                                        "tagName": {
                                            "description": "Name of the tag to build.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "resolvedStorageSource": {
                                    "description": "A copy of the build's `source.storage_source`, if exists, with any\ngenerations resolved.",
                                    "properties": {
                                        "bucket": {
                                            "description": "Google Cloud Storage bucket containing the source (see\n[Bucket Name\nRequirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
                                            "type": "string"
                                        },
                                        "generation": {
                                            "description": "Google Cloud Storage generation for the object. If the generation is\nomitted, the latest generation will be used.",
                                            "format": "int64",
                                            "type": "string"
                                        },
                                        "object": {
                                            "description": "Google Cloud Storage object containing the source.\n\nThis object must be a gzipped archive file (`.tar.gz`) containing source to\nbuild.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "startTime": {
                            "description": "Output only. Time at which execution of the build was started.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "status": {
                            "description": "Output only. Status of the build.",
                            "enum": [
                                "STATUS_UNKNOWN",
                                "QUEUED",
                                "WORKING",
                                "SUCCESS",
                                "FAILURE",
                                "INTERNAL_ERROR",
                                "TIMEOUT",
                                "CANCELLED"
                            ],
                            "type": "string"
                        },
                        "statusDetail": {
                            "description": "Output only. Customer-readable message about the current status.",
                            "type": "string"
                        },
                        "steps": {
                            "description": "Required. The operations to be performed on the workspace.",
                            "items": {
                                "description": "A step in the build pipeline.",
                                "properties": {
                                    "args": {
                                        "description": "A list of arguments that will be presented to the step when it is started.\n\nIf the image used to run the step's container has an entrypoint, the `args`\nare used as arguments to that entrypoint. If the image does not define\nan entrypoint, the first element in args is used as the entrypoint,\nand the remainder will be used as arguments.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "dir": {
                                        "description": "Working directory to use when running this step's container.\n\nIf this value is a relative path, it is relative to the build's working\ndirectory. If this value is absolute, it may be outside the build's working\ndirectory, in which case the contents of the path may not be persisted\nacross build step executions, unless a `volume` for that path is specified.\n\nIf the build specifies a `RepoSource` with `dir` and a step with a `dir`,\nwhich specifies an absolute path, the `RepoSource` `dir` is ignored for\nthe step's execution.",
                                        "type": "string"
                                    },
                                    "entrypoint": {
                                        "description": "Entrypoint to be used instead of the build step image's default entrypoint.\nIf unset, the image's default entrypoint is used.",
                                        "type": "string"
                                    },
                                    "env": {
                                        "description": "A list of environment variable definitions to be used when running a step.\n\nThe elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\"\nbeing given the value \"VALUE\".",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "id": {
                                        "description": "Unique identifier for this build step, used in `wait_for` to\nreference this build step as a dependency.",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Required. The name of the container image that will run this particular\nbuild step.\n\nIf the image is available in the host's Docker daemon's cache, it\nwill be run directly. If not, the host will attempt to pull the image\nfirst, using the builder service account's credentials if necessary.\n\nThe Docker daemon's cache will already have the latest versions of all of\nthe officially supported build steps\n([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).\nThe Docker daemon will also have cached many of the layers for some popular\nimages, like \"ubuntu\", \"debian\", but they will be refreshed at the time you\nattempt to use them.\n\nIf you built an image in a previous build step, it will be stored in the\nhost's Docker daemon's cache and is available to use as the name for a\nlater build step.",
                                        "type": "string"
                                    },
                                    "pullTiming": {
                                        "description": "Output only. Stores timing information for pulling this build step's\nbuilder image only.",
                                        "properties": {
                                            "endTime": {
                                                "description": "End of time span.",
                                                "format": "google-datetime",
                                                "type": "string"
                                            },
                                            "startTime": {
                                                "description": "Start of time span.",
                                                "format": "google-datetime",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "secretEnv": {
                                        "description": "A list of environment variables which are encrypted using a Cloud Key\nManagement Service crypto key. These values must be specified in the\nbuild's `Secret`.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "status": {
                                        "description": "Output only. Status of the build step. At this time, build step status is\nonly updated on build completion; step status is not updated in real-time\nas the build progresses.",
                                        "enum": [
                                            "STATUS_UNKNOWN",
                                            "QUEUED",
                                            "WORKING",
                                            "SUCCESS",
                                            "FAILURE",
                                            "INTERNAL_ERROR",
                                            "TIMEOUT",
                                            "CANCELLED"
                                        ],
                                        "type": "string"
                                    },
                                    "timeout": {
                                        "description": "Time limit for executing this build step. If not defined, the step has no\ntime limit and will be allowed to continue to run until either it completes\nor the build itself times out.",
                                        "format": "google-duration",
                                        "type": "string"
                                    },
                                    "timing": {
                                        "description": "Output only. Stores timing information for executing this build step.",
                                        "properties": {
                                            "endTime": {
                                                "description": "End of time span.",
                                                "format": "google-datetime",
                                                "type": "string"
                                            },
                                            "startTime": {
                                                "description": "Start of time span.",
                                                "format": "google-datetime",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "volumes": {
                                        "description": "List of volumes to mount into the build step.\n\nEach volume is created as an empty volume prior to execution of the\nbuild step. Upon completion of the build, volumes and their contents are\ndiscarded.\n\nUsing a named volume in only one step is not valid as it is indicative\nof a build request with an incorrect configuration.",
                                        "items": {
                                            "description": "Volume describes a Docker container volume which is mounted into build steps\nin order to persist files across build step execution.",
                                            "properties": {
                                                "name": {
                                                    "description": "Name of the volume to mount.\n\nVolume names must be unique per build step and must be valid names for\nDocker volumes. Each named volume must be used by at least two build steps.",
                                                    "type": "string"
                                                },
                                                "path": {
                                                    "description": "Path at which to mount the volume.\n\nPaths must be absolute and cannot conflict with other volume paths on the\nsame build step or with certain reserved volume paths.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "waitFor": {
                                        "description": "The ID(s) of the step(s) that this build step depends on.\nThis build step will not start until all the build steps in `wait_for`\nhave completed successfully. If `wait_for` is empty, this build step will\nstart when all previous build steps in the `Build.Steps` list have\ncompleted successfully.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "substitutions": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "Substitutions data for `Build` resource.",
                            "type": "object"
                        },
                        "tags": {
                            "description": "Tags for annotation of a `Build`. These are not docker tags.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "timeout": {
                            "description": "Amount of time that this build should be allowed to run, to second\ngranularity. If this amount of time elapses, work on the build will cease\nand the build status will be `TIMEOUT`.\n\nDefault time is ten minutes.",
                            "format": "google-duration",
                            "type": "string"
                        },
                        "timing": {
                            "additionalProperties": {
                                "description": "Start and end times for a build execution phase.",
                                "properties": {
                                    "endTime": {
                                        "description": "End of time span.",
                                        "format": "google-datetime",
                                        "type": "string"
                                    },
                                    "startTime": {
                                        "description": "Start of time span.",
                                        "format": "google-datetime",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "description": "Output only. Stores timing information for phases of the build. Valid keys\nare:\n\n* BUILD: time to execute all build steps\n* PUSH: time to push all specified images.\n* FETCHSOURCE: time to fetch source.\n\nIf the build does not specify source or images,\nthese keys will not be included.",
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "createTime": {
                    "description": "Output only. Time when the trigger was created.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "description": {
                    "description": "Human-readable description of this trigger.",
                    "type": "string"
                },
                "disabled": {
                    "description": "If true, the trigger will never result in a build.",
                    "type": "boolean"
                },
                "filename": {
                    "description": "Path, from the source root, to a file whose contents is used for the\ntemplate.",
                    "type": "string"
                },
                "github": {
                    "description": "GitHubEventsConfig describes the configuration of a trigger that creates\na build whenever a GitHub event is received.",
                    "properties": {
                        "checkSuite": {
                            "description": "Output only. Indicates that a build was generated from a check suite\nevent.",
                            "properties": {},
                            "type": "object"
                        },
                        "installationId": {
                            "description": "The installationID that emmits the GitHub event.",
                            "format": "int64",
                            "type": "string"
                        },
                        "name": {
                            "description": "Name of the repository.",
                            "type": "string"
                        },
                        "owner": {
                            "description": "Owner of the repository.",
                            "type": "string"
                        },
                        "pullRequest": {
                            "description": "filter to match changes in pull requests.",
                            "properties": {
                                "branch": {
                                    "description": "Regex of branches to match.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax",
                                    "type": "string"
                                },
                                "commentControl": {
                                    "description": "Whether to block builds on a \"/gcbrun\" comment from a repository owner or\ncollaborator.",
                                    "enum": [
                                        "COMMENTS_DISABLED",
                                        "COMMENTS_ENABLED"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "push": {
                            "description": "filter to match changes in refs like branches, tags.",
                            "properties": {
                                "branch": {
                                    "description": "Regexes of branches to match.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax",
                                    "type": "string"
                                },
                                "tag": {
                                    "description": "Regexes of tags to match.\n\nThe syntax of the regular expressions accepted is the syntax accepted by\nRE2 and described at https://github.com/google/re2/wiki/Syntax",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "Output only. Unique identifier of the trigger.",
                    "type": "string"
                },
                "ignoredFiles": {
                    "description": "ignored_files and included_files are file glob matches using\nhttp://godoc/pkg/path/filepath#Match extended with support for \"**\".\n\nIf ignored_files and changed files are both empty, then they are\nnot used to determine whether or not to trigger a build.\n\nIf ignored_files is not empty, then we ignore any files that match\nany of the ignored_file globs. If the change has no files that are\noutside of the ignored_files globs, then we do not trigger a build.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "includedFiles": {
                    "description": "If any of the files altered in the commit pass the ignored_files\nfilter and included_files is empty, then as far as this filter is\nconcerned, we should trigger the build.\n\nIf any of the files altered in the commit pass the ignored_files\nfilter and included_files is not empty, then we make sure that at\nleast one of those files matches a included_files glob. If not,\nthen we do not trigger a build.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "substitutions": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Substitutions data for Build resource.",
                    "type": "object"
                },
                "triggerTemplate": {
                    "description": "Template describing the types of source changes to trigger a build.\n\nBranch and tag names in trigger templates are interpreted as regular\nexpressions. Any branch or tag change that matches that regular expression\nwill trigger a build.",
                    "properties": {
                        "branchName": {
                            "description": "Name of the branch to build.",
                            "type": "string"
                        },
                        "commitSha": {
                            "description": "Explicit commit SHA to build.",
                            "type": "string"
                        },
                        "dir": {
                            "description": "Directory, relative to the source root, in which to run the build.\n\nThis must be a relative path. If a step's `dir` is specified and is an\nabsolute path, this value is ignored for that step's execution.",
                            "type": "string"
                        },
                        "projectId": {
                            "description": "ID of the project that owns the Cloud Source Repository. If omitted, the\nproject ID requesting the build is assumed.",
                            "type": "string"
                        },
                        "repoName": {
                            "description": "Name of the Cloud Source Repository. If omitted, the name \"default\" is\nassumed.",
                            "type": "string"
                        },
                        "tagName": {
                            "description": "Name of the tag to build.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    }
}